//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PersonalFinances.DATA.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PersonalFinancesDBEntities : DbContext
    {
        public PersonalFinancesDBEntities()
            : base("name=PersonalFinancesDBEntities")
        {
        }

        public PersonalFinancesDBEntities(string connStr)
            : base(connStr)
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<asset> assets { get; set; }
        public virtual DbSet<assetCategory> assetCategories { get; set; }
        public virtual DbSet<assetSubcategory> assetSubcategories { get; set; }
        public virtual DbSet<dossier> dossiers { get; set; }
        public virtual DbSet<importRecordTmp> importRecordTmps { get; set; }
        public virtual DbSet<liability> liabilities { get; set; }
        public virtual DbSet<record> records { get; set; }
        public virtual DbSet<recordCategory> recordCategories { get; set; }
        public virtual DbSet<recordSubcategory> recordSubcategories { get; set; }
        public virtual DbSet<recurrentRecord> recurrentRecords { get; set; }
        public virtual DbSet<assetSubcategoryView> assetSubcategoryViews { get; set; }
    
        public virtual int CreateCategoriesSubcategoriesFromImport(Nullable<int> dossierId, Nullable<bool> isExpense)
        {
            var dossierIdParameter = dossierId.HasValue ?
                new ObjectParameter("dossierId", dossierId) :
                new ObjectParameter("dossierId", typeof(int));
    
            var isExpenseParameter = isExpense.HasValue ?
                new ObjectParameter("isExpense", isExpense) :
                new ObjectParameter("isExpense", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateCategoriesSubcategoriesFromImport", dossierIdParameter, isExpenseParameter);
        }
    
        public virtual int CreateRecordsFromImport(Nullable<int> dossierId, Nullable<bool> isExpense)
        {
            var dossierIdParameter = dossierId.HasValue ?
                new ObjectParameter("dossierId", dossierId) :
                new ObjectParameter("dossierId", typeof(int));
    
            var isExpenseParameter = isExpense.HasValue ?
                new ObjectParameter("isExpense", isExpense) :
                new ObjectParameter("isExpense", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateRecordsFromImport", dossierIdParameter, isExpenseParameter);
        }
    
        public virtual ObjectResult<CreateReport_BalanceSheet_Result> CreateReport_BalanceSheet(Nullable<int> dossierId, Nullable<bool> isAsset)
        {
            var dossierIdParameter = dossierId.HasValue ?
                new ObjectParameter("dossierId", dossierId) :
                new ObjectParameter("dossierId", typeof(int));
    
            var isAssetParameter = isAsset.HasValue ?
                new ObjectParameter("isAsset", isAsset) :
                new ObjectParameter("isAsset", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CreateReport_BalanceSheet_Result>("CreateReport_BalanceSheet", dossierIdParameter, isAssetParameter);
        }
    
        public virtual ObjectResult<CreateReport_IncomeStatement_Result> CreateReport_IncomeStatement(Nullable<int> dossierId, string beginDate, string endDate, Nullable<bool> isExpense)
        {
            var dossierIdParameter = dossierId.HasValue ?
                new ObjectParameter("dossierId", dossierId) :
                new ObjectParameter("dossierId", typeof(int));
    
            var beginDateParameter = beginDate != null ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var isExpenseParameter = isExpense.HasValue ?
                new ObjectParameter("isExpense", isExpense) :
                new ObjectParameter("isExpense", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CreateReport_IncomeStatement_Result>("CreateReport_IncomeStatement", dossierIdParameter, beginDateParameter, endDateParameter, isExpenseParameter);
        }
    
        public virtual int DeleteDossier(Nullable<int> dossierId)
        {
            var dossierIdParameter = dossierId.HasValue ?
                new ObjectParameter("dossierId", dossierId) :
                new ObjectParameter("dossierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDossier", dossierIdParameter);
        }
    
        public virtual int DeleteFromRecordTmp(Nullable<int> dossierId)
        {
            var dossierIdParameter = dossierId.HasValue ?
                new ObjectParameter("dossierId", dossierId) :
                new ObjectParameter("dossierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFromRecordTmp", dossierIdParameter);
        }
    
        public virtual ObjectResult<GetrecordSubcategoriesByDossierId_Result> GetrecordSubcategoriesByDossierId(Nullable<int> dossierId)
        {
            var dossierIdParameter = dossierId.HasValue ?
                new ObjectParameter("dossierId", dossierId) :
                new ObjectParameter("dossierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetrecordSubcategoriesByDossierId_Result>("GetrecordSubcategoriesByDossierId", dossierIdParameter);
        }
    
        public virtual int ImportRecords_BulkInsert(Nullable<int> dossierId, string path)
        {
            var dossierIdParameter = dossierId.HasValue ?
                new ObjectParameter("dossierId", dossierId) :
                new ObjectParameter("dossierId", typeof(int));
    
            var pathParameter = path != null ?
                new ObjectParameter("path", path) :
                new ObjectParameter("path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportRecords_BulkInsert", dossierIdParameter, pathParameter);
        }
    
        public virtual int sp_deleteEmptyCategories(Nullable<int> dossierId)
        {
            var dossierIdParameter = dossierId.HasValue ?
                new ObjectParameter("dossierId", dossierId) :
                new ObjectParameter("dossierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deleteEmptyCategories", dossierIdParameter);
        }
    
        public virtual int sp_deleteRecordSelection(Nullable<int> dossierId, string beginDate, string endDate)
        {
            var dossierIdParameter = dossierId.HasValue ?
                new ObjectParameter("dossierId", dossierId) :
                new ObjectParameter("dossierId", typeof(int));
    
            var beginDateParameter = beginDate != null ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deleteRecordSelection", dossierIdParameter, beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_getImportRecordTmp_Result> sp_getImportRecordTmp(Nullable<int> dossierId)
        {
            var dossierIdParameter = dossierId.HasValue ?
                new ObjectParameter("dossierId", dossierId) :
                new ObjectParameter("dossierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getImportRecordTmp_Result>("sp_getImportRecordTmp", dossierIdParameter);
        }
    
        public virtual ObjectResult<sp_getListDuplicates_Result> sp_getListDuplicates(Nullable<int> dossierId, Nullable<decimal> revenue, Nullable<decimal> expense, Nullable<System.DateTime> date, string description, string comment)
        {
            var dossierIdParameter = dossierId.HasValue ?
                new ObjectParameter("dossierId", dossierId) :
                new ObjectParameter("dossierId", typeof(int));
    
            var revenueParameter = revenue.HasValue ?
                new ObjectParameter("revenue", revenue) :
                new ObjectParameter("revenue", typeof(decimal));
    
            var expenseParameter = expense.HasValue ?
                new ObjectParameter("expense", expense) :
                new ObjectParameter("expense", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getListDuplicates_Result>("sp_getListDuplicates", dossierIdParameter, revenueParameter, expenseParameter, dateParameter, descriptionParameter, commentParameter);
        }
    
        public virtual int sp_mergeCategories(Nullable<int> dossierId, Nullable<int> categoryIdFrom, Nullable<int> categoryIdTo)
        {
            var dossierIdParameter = dossierId.HasValue ?
                new ObjectParameter("dossierId", dossierId) :
                new ObjectParameter("dossierId", typeof(int));
    
            var categoryIdFromParameter = categoryIdFrom.HasValue ?
                new ObjectParameter("categoryIdFrom", categoryIdFrom) :
                new ObjectParameter("categoryIdFrom", typeof(int));
    
            var categoryIdToParameter = categoryIdTo.HasValue ?
                new ObjectParameter("categoryIdTo", categoryIdTo) :
                new ObjectParameter("categoryIdTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mergeCategories", dossierIdParameter, categoryIdFromParameter, categoryIdToParameter);
        }
    
        public virtual int sp_mergeSubcategories(Nullable<int> dossierId, Nullable<int> subcategoryIdFrom, Nullable<int> subcategoryIdTo)
        {
            var dossierIdParameter = dossierId.HasValue ?
                new ObjectParameter("dossierId", dossierId) :
                new ObjectParameter("dossierId", typeof(int));
    
            var subcategoryIdFromParameter = subcategoryIdFrom.HasValue ?
                new ObjectParameter("subcategoryIdFrom", subcategoryIdFrom) :
                new ObjectParameter("subcategoryIdFrom", typeof(int));
    
            var subcategoryIdToParameter = subcategoryIdTo.HasValue ?
                new ObjectParameter("subcategoryIdTo", subcategoryIdTo) :
                new ObjectParameter("subcategoryIdTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mergeSubcategories", dossierIdParameter, subcategoryIdFromParameter, subcategoryIdToParameter);
        }
    
        public virtual int sp_records_fullsearch(Nullable<int> dossierId, Nullable<int> recordSubcategoryId, Nullable<int> recordCategoryId, string beginDate, string endDate, string descr, string comment)
        {
            var dossierIdParameter = dossierId.HasValue ?
                new ObjectParameter("dossierId", dossierId) :
                new ObjectParameter("dossierId", typeof(int));
    
            var recordSubcategoryIdParameter = recordSubcategoryId.HasValue ?
                new ObjectParameter("recordSubcategoryId", recordSubcategoryId) :
                new ObjectParameter("recordSubcategoryId", typeof(int));
    
            var recordCategoryIdParameter = recordCategoryId.HasValue ?
                new ObjectParameter("recordCategoryId", recordCategoryId) :
                new ObjectParameter("recordCategoryId", typeof(int));
    
            var beginDateParameter = beginDate != null ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var descrParameter = descr != null ?
                new ObjectParameter("descr", descr) :
                new ObjectParameter("descr", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_records_fullsearch", dossierIdParameter, recordSubcategoryIdParameter, recordCategoryIdParameter, beginDateParameter, endDateParameter, descrParameter, commentParameter);
        }
    
        public virtual int sp_YearlyExpensePerCategory(Nullable<int> dossierId, string cat1, string cat2, string cat3, string cat4, Nullable<bool> isExpense)
        {
            var dossierIdParameter = dossierId.HasValue ?
                new ObjectParameter("dossierId", dossierId) :
                new ObjectParameter("dossierId", typeof(int));
    
            var cat1Parameter = cat1 != null ?
                new ObjectParameter("cat1", cat1) :
                new ObjectParameter("cat1", typeof(string));
    
            var cat2Parameter = cat2 != null ?
                new ObjectParameter("cat2", cat2) :
                new ObjectParameter("cat2", typeof(string));
    
            var cat3Parameter = cat3 != null ?
                new ObjectParameter("cat3", cat3) :
                new ObjectParameter("cat3", typeof(string));
    
            var cat4Parameter = cat4 != null ?
                new ObjectParameter("cat4", cat4) :
                new ObjectParameter("cat4", typeof(string));
    
            var isExpenseParameter = isExpense.HasValue ?
                new ObjectParameter("isExpense", isExpense) :
                new ObjectParameter("isExpense", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_YearlyExpensePerCategory", dossierIdParameter, cat1Parameter, cat2Parameter, cat3Parameter, cat4Parameter, isExpenseParameter);
        }
    }
}
